version: 0.9.7-{build}

build: false
environment:
    matrix:
        - PHP_TARGET: 5.6
          PHP_VC: 11
    PHP_SDK: c:\projects\php-sdk
    PHP_DEVPACK: c:\projects\php-devpack

clone_depth: 1
clone_folder: c:\projects\zephir

branches:
    only:
        - master
        - development

init:
    - SET ANSICON=121x90 (121x90)
    - SET COMPOSER_NO_INTERACTION=1
    - SET PARSER_RELEASE=1.0.1
    - SET PARSER_VERSION=1.0.1-232
    - ps: IF ($env:APPVEYOR_REPO_BRANCH -eq "development") {$env:APPVEYOR_CACHE_SKIP_SAVE = "true"}

cache:
    - vendor -> composer.json
    - composer.phar -> composer.json

os: Windows Server 2012 R2
platform:
    - x86

matrix:
    fast_finish: true

install:
    # ==================================================
    - echo Setting PHP version...
    # ==================================================
    - appveyor DownloadFile http://windows.php.net/downloads/releases/sha1sum.txt
    - ps: $env:PHP_VERSION=type sha1sum.txt | where { $_ -match "php-(${env:PHP_TARGET}\.\d+)-src" } | foreach { $matches[1] }
    - ps: $env:PARSER_DOWNLOAD_URL="https://github.com/phalcon/php-zephir-parser/releases/download/v${env:PARSER_RELEASE}/zephir_parser_${env:PLATFORM}_vc${env:PHP_VC}_php${env:PHP_VERSION}_${env:PARSER_VERSION}.zip"

    - echo Initializing Build...
    - cd %APPVEYOR_BUILD_FOLDER%
    - git submodule update --init --recursive
    - echo Preparing zephir win32 build...

    - echo Downloading PHP source code [%PHP_VERSION%]
    - ps: (new-object net.webclient).DownloadFile('http://windows.php.net/downloads/releases/php-' + ${env:PHP_VERSION} + '-Win32-VC' + ${env:PHP_VC} + '-' + ${env:PLATFORM} + '.zip', ${env:APPVEYOR_BUILD_FOLDER} + '\..\php.zip')
    - cd ..
    - 'mkdir php && mv php.zip php\php.zip && cd php'
    - 7z.exe x php.zip | FIND /V "ing  "
    - cd ..

    - echo Downloading PHP-SDK
    - mkdir php-sdk && cd php-sdk
    - ps: (new-object net.webclient).DownloadFile('http://windows.php.net/downloads/php-sdk/php-sdk-binary-tools-20110915.zip', ${env:APPVEYOR_BUILD_FOLDER} + '\..\php-sdk.zip')
    - '7z.exe x ..\php-sdk.zip | FIND /V "ing  "'
    - cd ..

    - echo Downloading PHP-Devel-Pack
    - ps: (new-object net.webclient).DownloadFile('http://windows.php.net/downloads/releases/php-devel-pack-' + ${env:PHP_VERSION} + '-Win32-VC' + ${env:PHP_VC} + '-' + ${env:PLATFORM} + '.zip', ${env:APPVEYOR_BUILD_FOLDER} + '\..\php-dev.zip')
    - 7z.exe x php-dev.zip | FIND /V "ing  "
    - mv php-%PHP_VERSION%-devel-VC11-%PLATFORM% php-devpack

    - echo Enable Zephir Parser
    - 'cd %APPVEYOR_BUILD_FOLDER%\..\php\ext'
    - curl --location --silent --show-error %PARSER_DOWNLOAD_URL% --output zephir_parser.zip
    - 7z.exe x zephir_parser.zip | FIND /V "ing  "

    - echo Building PHP [%PHP_VERSION%]
    - '"%VS110COMNTOOLS%\VsDevCmd" %PLATFORM%'
    - '%PHP_SDK%\bin\phpsdk_setvars'
    - 'cd %APPVEYOR_BUILD_FOLDER%\..\php'
    - 'echo extension_dir=%APPVEYOR_BUILD_FOLDER%\..\php\ext > php.ini'
    - 'echo extension=php_openssl.dll >> php.ini'
    - 'echo extension=php_pdo_sqlite.dll >> php.ini'
    - 'echo extension=php_gmp.dll >> php.ini'
    - 'echo extension=php_zephir_parser.dll >> php.ini'
    - 'set PATH=%cd%;%PATH%'
    - php --ri "Zephir Parser"

    # ==================================================
    - echo Download tests dependencies...
    # ==================================================
    - cd %APPVEYOR_BUILD_FOLDER%
    - if not exist vendor (php -r "readfile('https://getcomposer.org/installer');" | php && php composer.phar --version)
    - if not exist vendor (php composer.phar update --quiet --no-ansi --no-interaction --no-progress --optimize-autoloader --dev --prefer-dist --no-suggest)

build_script:
    - 'cd %APPVEYOR_BUILD_FOLDER%\..\php'
    - 'echo extension=%APPVEYOR_BUILD_FOLDER%\ext\Release_TS\php_test.dll >> php.ini'
    - cd %APPVEYOR_BUILD_FOLDER%
    - 'bin\zephir build'

test_script:
    - cd %APPVEYOR_BUILD_FOLDER%
    - 'vendor/bin/phpunit -c phpunit.xml.dist --debug'

on_failure:
    - 'dir'
    - ps: >-
        IF (Test-Path -Path compile-errors.log) {
            type compile-errors.log
        }

        IF (Test-Path -Path compile.log) {
            type compile.log
        }

        IF (Test-Path -Path configure.js) {
            type configure.js
        }
